"main.julie":
  "asm": |
    main.julie:
      mov     rcx, fs:[-8]
      cmp     rsp, [rcx+0x10]
      jbe     block7
    block1:
      sub     rsp, 0x38
      mov     [rsp+0x30], rbp
      lea     rbp, [rsp+0x30]
      xor     eax, eax
      movsd   xmm0, [rsp+0x40]
      movsd   xmm1, [rsp+0x48]
      jmp     block3
    block2:
      mov     rcx, [rsp+0x28]
      lea     rax, [rcx+1]
      movsd   xmm2, [rsp+0x20]
      movups  xmm3, xmm2
      mulsd   xmm2, xmm2
      movsd   xmm0, [rsp+0x18]
      movups  xmm4, xmm0
      mulsd   xmm0, xmm0
      subsd   xmm0, xmm2
      mulsd   xmm3, xmm4
      addsd   xmm3, xmm3
      movsd   xmm2, [rsp+0x50]
      addsd   xmm0, xmm2
      movsd   xmm4, [rsp+0x58]
      addsd   xmm3, xmm4
      movups  xmm1, xmm3
    block3:
      cmp     rax, 0x64
      jge     block6
    block4:
      mov     [rsp+0x28], rax
      movsd   [rsp+0x18], xmm0
      movsd   [rsp+0x20], xmm1
      movsd   [rsp], xmm0
      movsd   [rsp+8], xmm1
      call    math.Hypot
      movsd   xmm0, [rsp+0x10]
      movsd   xmm1, [$f64.4000000000000000]
      ucomisd xmm0, xmm1
      jbe     block2
    block5:
      mov     rax, [rsp+0x28]
      mov     [rsp+0x60], rax
      mov     rbp, [rsp+0x30]
      add     rsp, 0x38
      ret
    block6:
      mov     [rsp+0x60], 0x64
      mov     rbp, [rsp+0x30]
      add     rsp, 0x38
      ret
    block7:
      call    runtime.morestack_noctxt
      jmp     main.julie
    block8:
      int3
"main.main":
  "asm": |
    main.main:
      mov     rcx, fs:[-8]
      lea     rax, [rsp-0x70]
      cmp     rax, [rcx+0x10]
      jbe     block36
    block1:
      sub     rsp, 0xf0
      mov     [rsp+0xe8], rbp
      lea     rbp, [rsp+0xe8]
      cmp     [runtime.writeBarrier], 0
      jne     block34
    block2:
      lea     rax, [mem1]
      mov     [flag.Usage], rax
    block3:
      mov     [rsp+0x68], 0
      mov     [rsp+0x68], 0
      lea     rax, [rsp+0x68]
      mov     [rsp+0x80], rax
      mov     [rsp], 0x10
      mov     rax, [syscall.Stdin]
      mov     [rsp+8], rax
      mov     [rsp+0x10], 0x5413
      mov     rax, [rsp+0x80]
      mov     [rsp+0x18], rax
      call    syscall.Syscall
      cmp     [rsp+0x20], 0
      je      block5
    block4:
      mov     [rsp+0x68], 0x400020
    block5:
      movzx   eax, [rsp+0x6a]
      mov     rcx, [flag.CommandLine]
      mov     [rsp], rcx
      lea     rcx, [mem2]; "w + @ P [) )()\n, ->0s25: > Cc..."
      mov     [rsp+8], rcx
      mov     [rsp+0x10], 1
      mov     [rsp+0x18], rax
      lea     rax, [mem3]; "widthwrite (MB)\n Value addr= ..."
      mov     [rsp+0x20], rax
      mov     [rsp+0x28], 5
      call    flag.(*FlagSet).Int
      movzx   eax, [rsp+0x68]
      mov     rcx, [rsp+0x30]
      mov     [rsp+0x70], rcx
      mov     rdx, [flag.CommandLine]
      mov     [rsp], rdx
      lea     rdx, [mem4]; "hmsw + @ P [) )()\n, ->0s25: >..."
      mov     [rsp+8], rdx
      mov     [rsp+0x10], 1
      dec     rax
      mov     [rsp+0x18], rax
      lea     rax, [mem5]; "heightobjectpopcntscvg: selec..."
      mov     [rsp+0x20], rax
      mov     [rsp+0x28], 6
      call    flag.(*FlagSet).Int
      mov     rax, [rsp+0x30]
      mov     rcx, [mem6]
      mov     rdx, [os.Args]
      mov     rbx, [mem7]
      cmp     rbx, 1
      jb      block35
    block6:
      mov     [rsp+0x78], rax
      mov     rax, [flag.CommandLine]
      mov     [rsp], rax
      lea     rax, [rcx-1]
      mov     rcx, rax
      neg     rax
      sar     rax, 0x3f
      and     rax, 0x10
      add     rax, rdx
      mov     [rsp+8], rax
      lea     rax, [rbx-1]
      mov     [rsp+0x10], rax
      mov     [rsp+0x18], rcx
      call    flag.(*FlagSet).Parse
      mov     rax, [flag.CommandLine]
      cmp     [rax+0x38], 2
      jne     block33
    block7:
      mov     rax, [flag.CommandLine]
      mov     rcx, [rax+0x30]
      cmp     [rax+0x38], 0
      jg      block32
    block8:
      xor     eax, eax
      xor     ecx, ecx
    block9:
      mov     [rsp], rax
      mov     [rsp+8], rcx
      mov     [rsp+0x10], 0x40
      call    strconv.ParseFloat
      movsd   xmm0, [rsp+0x18]
      movsd   [rsp+0x58], xmm0
      cmp     [rsp+0x20], 0
      jne     block31
    block10:
      mov     rax, [flag.CommandLine]
      mov     rcx, [rax+0x30]
      cmp     [rax+0x38], 1
      jg      block30
    block11:
      xor     eax, eax
      xor     ecx, ecx
    block12:
      mov     [rsp], rcx
      mov     [rsp+8], rax
      mov     [rsp+0x10], 0x40
      call    strconv.ParseFloat
      movsd   xmm0, [rsp+0x18]
      movsd   [rsp+0x60], xmm0
      cmp     [rsp+0x20], 0
      jne     block29
    block13:
      mov     rax, [rsp+0x70]
      movsd   xmm1, [rsp+0x58]
      mov     rcx, [rsp+0x78]
      xor     edx, edx
      jmp     block26
    block14:
      mov     rsi, [rsp+0x50]
      lea     rbx, [rsi+1]
      mov     rax, [rsp+0x70]
      mov     rcx, [rsp+0x78]
      mov     rdx, [rsp+0x48]
      movsd   xmm0, [rsp+0x60]
      movsd   xmm1, [rsp+0x58]
      movsd   xmm2, [rsp+0x40]
      movsd   xmm3, [$f64.4008000000000000]
      movsd   xmm4, [$f64.3ff8000000000000]
    block15:
      mov     rsi, [rax]
      cmp     rbx, rsi
      jge     block25
    block16:
      mov     [rsp+0x50], rbx
      movsd   [rsp], xmm2
      xorps   xmm3, xmm3
      cvtsi2sd xmm3, rbx
      lea     rax, [rsi-1]
      xorps   xmm4, xmm4
      cvtsi2sd xmm4, rax
      divsd   xmm3, xmm4
      addsd   xmm3, xmm3
      movsd   xmm4, [$f64.3ff0000000000000]
      subsd   xmm3, xmm4
      movsd   [rsp+8], xmm3
      movsd   [rsp+0x10], xmm1
      movsd   [rsp+0x18], xmm0
      call    main.julie
      mov     rax, [rsp+0x20]
      cmp     rax, 0x64
      je      block24
    block17:
      cmp     rax, 0x4b
      jge     block23
    block18:
      cmp     rax, 0x32
      jge     block22
    block19:
      cmp     rax, 0x19
      jl      block21
    block20:
      xorps   xmm0, xmm0
      movups  [rsp+0x88], xmm0
      lea     rax, [mem8]
      mov     [rsp+0x88], rax
      lea     rcx, [mem9]; "\u0007BM"
      mov     [rsp+0x90], rcx
      mov     rdx, [os.Stdout]
      lea     rbx, [go.itab.*os.File,io.Writer]
      mov     [rsp], rbx
      mov     [rsp+8], rdx
      lea     rdx, [rsp+0x88]
      mov     [rsp+0x10], rdx
      mov     [rsp+0x18], 1
      mov     [rsp+0x20], 1
      call    fmt.Fprint
      jmp     block14
    block21:
      xorps   xmm0, xmm0
      movups  [rsp+0xd8], xmm0
      lea     rax, [mem8]
      mov     [rsp+0xd8], rax
      lea     rcx, [mem10]
      mov     [rsp+0xe0], rcx
      mov     rdx, [os.Stdout]
      lea     rbx, [go.itab.*os.File,io.Writer]
      mov     [rsp], rbx
      mov     [rsp+8], rdx
      lea     rdx, [rsp+0xd8]
      mov     [rsp+0x10], rdx
      mov     [rsp+0x18], 1
      mov     [rsp+0x20], 1
      call    fmt.Fprint
      jmp     block14
    block22:
      xorps   xmm0, xmm0
      movups  [rsp+0x98], xmm0
      lea     rax, [mem8]
      mov     [rsp+0x98], rax
      lea     rcx, [mem11]; "\u0005BM"
      mov     [rsp+0xa0], rcx
      mov     rdx, [os.Stdout]
      lea     rbx, [go.itab.*os.File,io.Writer]
      mov     [rsp], rbx
      mov     [rsp+8], rdx
      lea     rdx, [rsp+0x98]
      mov     [rsp+0x10], rdx
      mov     [rsp+0x18], 1
      mov     [rsp+0x20], 1
      call    fmt.Fprint
      jmp     block14
    block23:
      xorps   xmm0, xmm0
      movups  [rsp+0xa8], xmm0
      lea     rax, [mem8]
      mov     [rsp+0xa8], rax
      lea     rcx, [mem12]; "\u000eBM"
      mov     [rsp+0xb0], rcx
      mov     rdx, [os.Stdout]
      lea     rbx, [go.itab.*os.File,io.Writer]
      mov     [rsp], rbx
      mov     [rsp+8], rdx
      lea     rdx, [rsp+0xa8]
      mov     [rsp+0x10], rdx
      mov     [rsp+0x18], 1
      mov     [rsp+0x20], 1
      call    fmt.Fprint
      jmp     block14
    block24:
      xorps   xmm0, xmm0
      movups  [rsp+0xb8], xmm0
      lea     rax, [mem8]
      mov     [rsp+0xb8], rax
      lea     rcx, [mem13]; "\u0001BM"
      mov     [rsp+0xc0], rcx
      mov     rdx, [os.Stdout]
      lea     rbx, [go.itab.*os.File,io.Writer]
      mov     [rsp], rbx
      mov     [rsp+8], rdx
      lea     rdx, [rsp+0xb8]
      mov     [rsp+0x10], rdx
      mov     [rsp+0x18], 1
      mov     [rsp+0x20], 1
      call    fmt.Fprint
      jmp     block14
    block25:
      xorps   xmm0, xmm0
      movups  [rsp+0xc8], xmm0
      lea     rax, [mem8]
      mov     [rsp+0xc8], rax
      lea     rcx, [mem14]; "\u0018BM"
      mov     [rsp+0xd0], rcx
      mov     rdx, [os.Stdout]
      lea     rbx, [go.itab.*os.File,io.Writer]
      mov     [rsp], rbx
      mov     [rsp+8], rdx
      lea     rdx, [rsp+0xc8]
      mov     [rsp+0x10], rdx
      mov     [rsp+0x18], 1
      mov     [rsp+0x20], 1
      call    fmt.Fprint
      mov     rax, [rsp+0x48]
      lea     rdx, [rax+1]
      mov     rax, [rsp+0x70]
      movsd   xmm0, [rsp+0x60]
      movsd   xmm1, [rsp+0x58]
      mov     rcx, [rsp+0x78]
    block26:
      mov     rbx, [rcx]
      cmp     rdx, rbx
      jge     block28
    block27:
      mov     [rsp+0x48], rdx
      xorps   xmm2, xmm2
      cvtsi2sd xmm2, rdx
      dec     rbx
      xorps   xmm3, xmm3
      cvtsi2sd xmm3, rbx
      divsd   xmm2, xmm3
      movsd   xmm3, [$f64.4008000000000000]
      mulsd   xmm2, xmm3
      movsd   xmm4, [$f64.3ff8000000000000]
      subsd   xmm2, xmm4
      movsd   [rsp+0x40], xmm2
      xor     ebx, ebx
      jmp     block15
    block28:
      mov     rbp, [rsp+0xe8]
      add     rsp, 0xf0
      ret
    block29:
      mov     rdx, [flag.Usage]
      mov     rax, [rdx]
      call    rax
      mov     [rsp], 1
      call    os.Exit
      movsd   xmm0, [rsp+0x60]
      jmp     block13
    block30:
      mov     rdx, [rcx+0x10]
      mov     rax, [rcx+0x18]
      mov     rcx, rdx
      jmp     block12
    block31:
      mov     rdx, [flag.Usage]
      mov     rax, [rdx]
      call    rax
      mov     [rsp], 1
      call    os.Exit
      movsd   xmm0, [rsp+0x58]
      jmp     block10
    block32:
      mov     rdx, [rcx+8]
      mov     rax, [rcx]
      mov     rcx, rdx
      jmp     block9
    block33:
      mov     rdx, [flag.Usage]
      mov     rax, [rdx]
      call    rax
      mov     [rsp], 1
      call    os.Exit
      jmp     block7
    block34:
      lea     rdi, [flag.Usage]
      lea     rax, [mem1]
      call    runtime.gcWriteBarrier
      jmp     block3
    block35:
      mov     eax, 1
      mov     rcx, rbx
      call    runtime.panicSliceB
    block36:
      call    runtime.morestack_noctxt
      jmp     main.main
